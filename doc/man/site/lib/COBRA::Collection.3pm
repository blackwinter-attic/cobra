.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "COBRA::Collection 3"
.TH COBRA::Collection 3 "2006-06-25" "perl v5.8.1" "User Contributed Perl Documentation"
.SH "NAME"
COBRA::Collection \- Abstract base class for bibliographic collections
.SH "VERSION"
.IX Header "VERSION"
This documentation refers to COBRA::Collection version 0.0.1
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    Don't use COBRA::Collection directly, use an appropriate subclass instead.
.Ve
.SH "DESCRIPTION [STILL MISSING!]"
.IX Header "DESCRIPTION [STILL MISSING!]"
A full description of the module and its features.
May include numerous subsections (i.e., =head2, =head3, etc.)
.SH "METHODS"
.IX Header "METHODS"
A separate section listing the public components of the module's interface.
These normally consist of methods that may be called on objects belonging to
the classes that the module provides.
.PP
In an object-oriented module, this section should begin with a sentence of the
form \*(L"An object of this class represents...\*(R", to give the reader a high-level
context to help them understand the methods that are subsequently described.
.Sh "Constructor"
.IX Subsection "Constructor"
.IP "new" 4
.IX Item "new"
TO-BE-DOCUMENTED
.Sh "Public interface methods"
.IX Subsection "Public interface methods"
.IP "do_import" 4
.IX Item "do_import"
Imports the collection by first detecting which files to import (using the
\&\fI_get_data_files()\fR function) and checking if there
already are any data imported (using the
\&\fICOBRA::Util::check_for_files()\fR function)
which will then be kept only if the \f(CW\*(C`keepold\*(C'\fR option was true. Then
calls the collection object's \fIparse_records()\fR method,
saves the initial category information to a file (using the
\&\fICOBRA::Util::write_class_map()\fR function)
and finally calls the indexer through _do_indexing.
.Sp
Takes a hash reference of options as argument. These include: \f(CW\*(C`data_files\*(C'\fR,
the data files to import (alternatively will be taken from the collection's
\&\fIimport/\fR directory); \f(CW\*(C`class_map\*(C'\fR, the file the initial category information
shall be written to; \f(CW\*(C`fields\*(C'\fR, the list of fields to import from records;
\&\f(CW\*(C`ratio\*(C'\fR, the percentage of records to use for testing (vs. training),
additionally indicates whether the documents are determined for testing/training
or categorizing or class integrity checking; and \f(CW\*(C`keepold\*(C'\fR, a boolean value
specifying whether to exit when there already are imported data or to just give
a warning.
.IP "parse_records" 4
.IX Item "parse_records"
Not implemented here, has to be overridden by subclasses in order to reflect
collection type-specific characteristics. Takes a reference to the list of
to-be-imported files and a reference to an option hash as arguments. Returns
a reference to a hash of the class mapping and a reference to the array of
written record files. See appropriate subclass for details.
.IP "write_record" 4
.IX Item "write_record"
Writes each individual record to a file. Takes a reference to a list of lines
to write and a reference to an option hash as arguments. Options include:
\&\f(CW\*(C`id\*(C'\fR, the record identifier; \f(CW\*(C`target_set\*(C'\fR, the set, i.e. directory,
to write the record to; and \f(CW\*(C`duplicate\*(C'\fR, a boolean value specifying whether
all records shall be duplicated in the test directory (e.g., for class integrity
checks). Returns a list of the files written.
.Sh "Internal utility subroutines"
.IX Subsection "Internal utility subroutines"
.IP "_get_data_files" 4
.IX Item "_get_data_files"
Determines the data files to import, i.e. either the supplied files (which will
also be copied to the collection's \fIimport/\fR directory) or the files from the
collection's \fIimport/\fR directory. Takes a list of data files as argument.
Returns the list of files found (or simply those passed).
.IP "_determine_target_set" 4
.IX Item "_determine_target_set"
Determines the set, i.e. the directory, the current record file shall be written
to, depending on the value of the ratio. Currently, it simply uses the ratio as
probability \*(-- in the future a more sophisticated approach may be implemented.
Takes the ratio as argument. Returns the name of the target set (one of
\&\f(CW'train'\fR, \f(CW'test'\fR or \f(CW'categorize'\fR \*(-- in case the ratio is
set up for integrity checking, the target set will be \f(CW'train'\fR).
.IP "_do_indexing" 4
.IX Item "_do_indexing"
Does the actual indexing of the record files by passing these files to the
\&\fICOBRA::WrapIndexer::run()\fR method, and
subsequently calling the
\&\fICOBRA::WrapIndexer::get_plain_results()\fR
method. Decides whether indexing shall be performed at all if an object of a
subclass of COBRA::WrapIndexer was supplied (created by
\&\fICOBRA::do_import()\fR). Depending on the value of the
\&\f(CW\*(C`effect\*(C'\fR attribute, the indexing results will be added to the original
records or just replace them.
.SH "EXAMPLES [STILL MISSING!]"
.IX Header "EXAMPLES [STILL MISSING!]"
Many people learn better by example than by explanation, and most learn better
by a combination of the two. Providing a \fI/demo\fR directory stocked with well\-
commented examples is an excellent idea, but users might not have access to the
original distribution, and demos are unlikely to have been installed for them.
Adding a few illustrative examples in the documentation itself can greatly
increase the \*(L"learnability\*(R" of your code.
.SH "DIAGNOSTICS [STILL MISSING!]"
.IX Header "DIAGNOSTICS [STILL MISSING!]"
A list of every error and warning message that the module can generate
(even the ones that will \*(L"never happen\*(R"), with a full explanation of each
problem, one or more likely causes, and any suggested remedies.
.SH "CONFIGURATION AND ENVIRONMENT [STILL MISSING!]"
.IX Header "CONFIGURATION AND ENVIRONMENT [STILL MISSING!]"
A full explanation of any configuration system(s) used by the module,
including the names and locations of any configuration files, and the
meaning of any environment variables and properties that can be set. These
descriptions must also include details of any configuration language used.
.SH "DEPENDENCIES [STILL MISSING!]"
.IX Header "DEPENDENCIES [STILL MISSING!]"
A list of all the other modules that this module relies upon, including any
restrictions on versions, and an indication of whether these required modules
are part of the standard Perl distribution, part of the module's distribution,
or must be installed separately.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
A list of known problems with the module, together with some indications of
whether they are likely to be fixed in an upcoming release.
.PP
Also a list of restrictions on the features the module does provide:
data types that cannot be handled, performance issues and the circumstances
in which they may arise, practical limitations on the size of data sets,
special cases that are not (yet) handled, etc.
.PP
There are no known bugs in this module. Please report problems to Jens Wille
\&\f(CW\*(C`<jens.wille@gmail.com>\*(C'\fR. Patches are welcome.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jens Wille \f(CW\*(C`<jens.wille@gmail.com>\*(C'\fR
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (C) 2006 Jens Wille \f(CW\*(C`<jens.wille@gmail.com>\*(C'\fR
.PP
This program is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place \- Suite 330, Boston, \s-1MA\s0  02111\-1307, \s-1USA\s0.
.SH "SEE ALSO/REFERENCES"
.IX Header "SEE ALSO/REFERENCES"
Often there will be other modules and applications that are possible
alternatives to using your software. Or other documentation that would be of
use to the users of your software. Or a journal article or book that explains
the ideas on which the software is based. Listing those in a \*(L"See Also\*(R" section
allows people to understand your software better and to find the best solution
for their problems themselves, without asking you directly.
.PP
\&\s-1COBRA\s0, COBRA::Collection::Generic,
COBRA::Collection::STN::SOLIS,
COBRA::Collection::SimpleSOLIS
