.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "COBRA 1"
.TH COBRA 1 "2006-06-25" "perl v5.8.1" "User Contributed Perl Documentation"
.SH "NAME"
cobra.pl \- classification of bibliographic records, automatic
.SH "VERSION"
.IX Header "VERSION"
This documentation refers to cobra.pl version 0.0.1
.SH "USAGE"
.IX Header "USAGE"
.Vb 1
\&    # Brief working invocation examples here showing the most common usages:
.Ve
.PP
.Vb 2
\&    # This section will be as far as many users ever read, so we
\&    # try to make it as educational and exemplary as possible ;-)
.Ve
.PP
.Vb 5
\&    # Create new collection 'testcol':
\&    cobra.pl create testcol
\&    cobra.pl 1      testcol  # Numbers are recognized as well
\&                             # (Extra whitespace just for
\&                             # improved readability)
.Ve
.PP
.Vb 2
\&    # Copy data to import directory...
\&    <whatever your copy command is>
.Ve
.PP
.Vb 3
\&    # ...and import collection data:
\&    cobra.pl import testcol
\&    cobra.pl 2      testcol  # ditto
.Ve
.PP
.Vb 4
\&    # Alternatively, specify data to import:
\&    # (By default, data are imported for training/testing; if
\&    # you want to categorize your data specify a ratio of '-1')
\&    cobra.pl import testcol -d data.txt
.Ve
.PP
.Vb 3
\&    # Train DecisionTree learner:
\&    cobra.pl train testcol -l DecisionTree
\&    cobra.pl 3     testcol -l DecisionTree  # ditto
.Ve
.PP
.Vb 3
\&    # Test learner on reserved data:
\&    cobra.pl test testcol
\&    cobra.pl 4    testcol  # ditto
.Ve
.PP
.Vb 3
\&    # Export collection as Midos2000 database [NOT IMPLEMENTED YET!]:
\&    cobra.pl export testcol -f Midos
\&    cobra.pl 6      testcol -f Midos  # ditto
.Ve
.PP
.Vb 3
\&    # Or in one go ;-) (Phase 5/categorize will be skipped; see above)
\&    cobra.pl create-export testcol -l DecisionTree -f Midos -d data.txt
\&    cobra.pl 1-6           testcol -l DecisionTree -f Midos -d data.txt
.Ve
.PP
See section \*(L"\s-1EXAMPLES\s0\*(R" for more detailed demonstrations. [\s-1STILL\s0 \s-1MISSING\s0!]
.SH "REQUIRED ARGUMENTS"
.IX Header "REQUIRED ARGUMENTS"
A complete list of every argument that must appear on the command line
when the application is invoked, explaining what each of them does, any
restrictions on where each one may appear (i.e., flags that must appear
before or after filenames), and how the various arguments and options
may interact (i.e., mutual exclusions, required combinations, etc.).
.IP "<action>" 4
.IX Item "<action>"
The action to perform (May be number or name):
.Sp
1. create
.Sp
2. import
.Sp
3. train
.Sp
4. test
.Sp
5. categorize
.Sp
6. export [\s-1NOT\s0 \s-1IMPLEMENTED\s0 \s-1YET\s0!]
.Sp
7. purge
.Sp
8. remove
.Sp
With a properly set up configuration file or command-line you may even specify
ranges of actions. Examples: \f(CW'import\-export'\fR, or equivalently
\&\f(CW'2\-6'\fR (phase 5/categorize or phases 3/train and 4/test will be skipped;
see below); \f(CW'purge,import'\fR, or equivalently \f(CW'7,2'\fR;
\&\f(CW'create\-train,export'\fR, or equivalently \f(CW'1\-3,6'\fR \*(-- note that
order matters!). Whether training (and testing) or categorizing will be
inferred from the \f(CW\*(C`\-ratio\*(C'\fR option.
.IP "<collection>" 4
.IX Item "<collection>"
The name of the collection to operate on.
.PP
\&\fB\s-1MIND\s0 \s-1THE\s0 \s-1ORDER:\s0 <action> \f(BIbefore\fB <collection>!\fR
.SH "OPTIONS"
.IX Header "OPTIONS"
A complete list of every available option with which the application
can be invoked, explaining what each does, and listing any restrictions,
or interactions.
.Sh "Generic options"
.IX Subsection "Generic options"
.IP "\-v[erbosity] [=] <verbosity>" 4
.IX Item "-v[erbosity] [=] <verbosity>"
Controls the verbosity of output (0=none, 2=lots). \s-1NOTE:\s0 At the moment the
level of verbosity is not accounted for, since there is no information to
display (however, there will be some information from
AI::Categorizer according to the specified verbosity level);
this will change in the future. [default: \f(CW'1'\fR \*(-- spits out some
explanatory information]
.IP "\-conf[ig[_file]] [=] <config_file>" 4
.IX Item "-conf[ig[_file]] [=] <config_file>"
Global configuration file to use. [default: \f(CW'etc/cobra.conf'\fR]
.Sh "Import options"
.IX Subsection "Import options"
.IP "\-t[ype] [=] <collection_type>" 4
.IX Item "-t[ype] [=] <collection_type>"
Type of collection to import. See COBRA::Collection for
available types (\s-1NOTE:\s0 specify, e.g., \f(CW'Simple::SOLIS'\fR as 
\&\f(CW'Simple/SOLIS'\fR). [default: \f(CW'Simple/SOLIS'\fR]
.IP "\-u[se[_fields]] [=] <fields>" 4
.IX Item "-u[se[_fields]] [=] <fields>"
Comma-separated list of fields to use from records. Type \f(CW'help'\fR for a
list of available fields. Use \f(CW'#ALL#'\fR as the \fIonly\fR value to consider
all available fields. [default: \f(CW'TI,CT,AB,ME'\fR]
.IP "\-i[ndexer] [=] <indexer>" 4
.IX Item "-i[ndexer] [=] <indexer>"
This option tells us to perform automatic indexing on the records, using the
specified type of indexer. See COBRA::WrapIndexer for
available types. Also set the \f(CW\*(C`\-effect\*(C'\fR option to decide whether the
indexing results shall be added to the records or replace them. [default:
\&\f(CW''\fR \*(-- i.e., don't index]
.IP "\-[indexer_]b[ase] [=] <base_directory>" 4
.IX Item "-[indexer_]b[ase] [=] <base_directory>"
Path to the indexer's base directory. [default: \f(CW''\fR]
.IP "\-[indexer_]a[rgs] [=] <argument>..." 4
.IX Item "-[indexer_]a[rgs] [=] <argument>..."
Additional arguments for the indexer. \s-1NOTE:\s0 If you specify this option on the
command\-line, it must be the last one. [default: \f(CW''\fR]
.IP "\-e[ffect] [=] <add_or_replace>" 4
.IX Item "-e[ffect] [=] <add_or_replace>"
Specifies whether the indexing results shall be added to the records or replace
them. [default: \f(CW'add'\fR]
.IP "\-[re]p[eat]" 4
.IX Item "-[re]p[eat]"
If specified, indexing results will be repeated according to their weight
(assuming integer values, representing the term frequency).
.IP "\-r[atio] [=] <ratio>" 4
.IX Item "-r[atio] [=] <ratio>"
Percentage of documents to use for testing (vs. training). Also implies the
intended purpose, i.e. whether training (and testing) or categorizing or doing a
class integrity check (testing the training data). Use the following keywords or
values:
.Sp
\&\f(CW'train'\fR: Training only, equivalent to \f(CW'0'\fR.
.Sp
\&\f(CW'test'\fR: Testing only, equivalent to \f(CW'100'\fR.
.Sp
\&\f(CW'categorize'\fR: Categorizing, equivalent to \f(CW'\-1'\fR.
.Sp
\&\f(CW'check_integrity'\fR: Class integrity check, equivalent to \f(CW'\-2'\fR. All documents
will be used for both training and testing.
.Sp
[default: \f(CW'10'\fR \*(-- thus reserves 10% of the documents for testing and uses
the rest for training]
.IP "\-k[eepold]" 4
.IX Item "-k[eepold]"
Keeps already imported data, i.e. adds specified data onto existing ones. Use
with care.
.IP "\-d[ata[_file[s]]] [=] <data_file>..." 4
.IX Item "-d[ata[_file[s]]] [=] <data_file>..."
Data files to import; alternatively, copy your to-be-imported data into the
\&\fIcollect/<colname>/import/\fR directory, which will be done anyway. All
files from the aforementioned directory will be used if this option is omitted.
\&\s-1NOTE:\s0 If you specify this option on the command\-line, it must be the last one.
[default: \f(CW''\fR \*(-- thus uses files from the import directory]
.Sh "Training options"
.IX Subsection "Training options"
.IP "\-l[earner] [=] <learner>" 4
.IX Item "-l[earner] [=] <learner>"
Machine learning algorithm to use. Type \f(CW'help'\fR for a list of available
algorithms or see \*(L"Learners\*(R" in \s-1COBRA\s0 for more information, including
learner-specific parameters and order of magnitude for their processing time.
[default: \f(CW'NaiveBayes'\fR]
.Sh "Export options"
.IX Subsection "Export options"
.IP "\-f[ormat] [=] <export_format>" 4
.IX Item "-f[ormat] [=] <export_format>"
Format to export collection to. Type \f(CW'help'\fR for a list of available
formats or see COBRA::Export for more information. [default:
\&\f(CW'Midos'\fR]
.PP
\&\s-1NOTE:\s0 Unfortunately, you can't specify both \f(CW\*(C`\-indexer_args\*(C'\fR and
\&\f(CW\*(C`\-data_files\*(C'\fR on the command-line at the same time (due to restrictions in
Getopt::Euclid) \*(-- hopefully, this will be fixed in the future, either by
Getopt::Euclid or by this module. For now, either use the configuration file or
the alternative import method through the import directory. Sorry for any
inconvenience ;\-)
.SH "DESCRIPTION [STILL MISSING!]"
.IX Header "DESCRIPTION [STILL MISSING!]"
A full description of the application and its features.
May include numerous subsections (i.e., =head2, =head3, etc.)
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
The following subroutines are simply used to segment the code.
.IP "clean_argv" 4
.IX Item "clean_argv"
Cleans up the global \f(CW%ARGV\fR hash to enforce consistency in use
throughout the code \*(-- i.e., deletes any shortnames introduced by
Getopt::Euclid, uses only the names specified in the
\&\f(CW%is_valid\fR hash instead (apart from certain exceptions). Updates
the global \f(CW%ARGV\fR hash.
.IP "print_help" 4
.IX Item "print_help"
Prints a help message for certain arguments if requested (usually by specifying
\&\f(CW'help'\fR as argument value).
.IP "parse_action" 4
.IX Item "parse_action"
Parses any range specifications in the action string. Returns boolean values for
whether we are creating a new collection and/or removing an existing one.
Updates the global \f(CW%ARGV\fR hash.
.IP "parse_conf" 4
.IX Item "parse_conf"
Reads and parses the given configuration files. Takes a list of configuration
files as argument. Returns a hash containing the configuration settings.
.IP "merge_conf" 4
.IX Item "merge_conf"
Merges the config file settings with the command-line arguments, the latter
taking precedence over the former. Takes the config hash as argument. Updates
the global \f(CW%ARGV\fR hash.
.IP "split_argv" 4
.IX Item "split_argv"
Splits the given arguments at specified strings to array references. Takes a
hash of \f(CW\*(C`argument => string\*(C'\fR pairs as argument. Updates the global
\&\f(CW%ARGV\fR hash.
.IP "drop_action" 4
.IX Item "drop_action"
Drops certain actions, according to the specified ratio. Updates the global
\&\f(CW%ARGV\fR hash.
.SH "EXAMPLES [STILL MISSING!]"
.IX Header "EXAMPLES [STILL MISSING!]"
Many people learn better by example than by explanation, and most learn better
by a combination of the two. Providing a \fI/demo\fR directory stocked with well\-
commented examples is an excellent idea, but users might not have access to the
original distribution, and demos are unlikely to have been installed for them.
Adding a few illustrative examples in the documentation itself can greatly
increase the \*(L"learnability\*(R" of your code.
.SH "DIAGNOSTICS [STILL MISSING!]"
.IX Header "DIAGNOSTICS [STILL MISSING!]"
A list of every error and warning message that the application can generate
(even the ones that will \*(L"never happen\*(R"), with a full explanation of each
problem, one or more likely causes, and any suggested remedies. If the
application generates exit status codes (e.g., under \s-1UNIX\s0), then list the exit
status associated with each error.
.SH "CONFIGURATION AND ENVIRONMENT [STILL MISSING!]"
.IX Header "CONFIGURATION AND ENVIRONMENT [STILL MISSING!]"
A full explanation of any configuration systems used by the application,
including the names and locations of any configuration files, and the
meaning of any environment variables and properties that can be set. These
descriptions must also include details of any configuration language used.
.SH "DEPENDENCIES [STILL MISSING!]"
.IX Header "DEPENDENCIES [STILL MISSING!]"
A list of all the other programs or modules that this application relies upon,
including any restrictions on versions, and an indication of whether these
required programs and modules are part of the standard Perl distribution,
part of the application's distribution, or must be installed separately.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
A list of known problems with the application, together with some indications
of whether they are likely to be fixed in an upcoming release.
.PP
Also a list of restrictions on the features the application does provide:
data types that cannot be handled, performance issues and the circumstances
in which they may arise, practical limitations on the size of data sets,
special cases that are not (yet) handled, etc.
.PP
There are no known bugs in this application. Please report problems to Jens
Wille \f(CW\*(C`<jens.wille@gmail.com>\*(C'\fR. Patches are welcome.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jens Wille \f(CW\*(C`<jens.wille@gmail.com>\*(C'\fR
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (C) 2006 Jens Wille \f(CW\*(C`<jens.wille@gmail.com>\*(C'\fR
.PP
This program is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place \- Suite 330, Boston, \s-1MA\s0  02111\-1307, \s-1USA\s0.
.SH "SEE ALSO/REFERENCES"
.IX Header "SEE ALSO/REFERENCES"
Often there will be other modules and applications that are possible
alternatives to using your software. Or other documentation that would be of
use to the users of your software. Or a journal article or book that explains
the ideas on which the software is based. Listing those in a \*(L"See Also\*(R" section
allows people to understand your software better and to find the best solution
for their problems themselves, without asking you directly.
.PP
\&\s-1COBRA\s0, COBRA::Collection,
COBRA::Util
